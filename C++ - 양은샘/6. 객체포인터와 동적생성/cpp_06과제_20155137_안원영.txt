- 아래에 제시된 문제의 빈 괄호를 채워 넣으세요.

①    (   &   ) 연산자는 변수의 주소를 추출하기위해 사용한다.

②    동적으로 할당된 메모리를 반환하고자 할 때는 (  delete  ) 연산자를 사용한다.

③    (  *  ) 연산자는 할당되는 동적 메모리의 시작 주소를 반환한다.

④    동적으로 할당되는 메모리는 (  heap ) 영역에 할당 받는 메모리이다.

⑤    new를 이용하여 할당 받은 메모리를 해제 할 때에는 (  delete  )를 사용한다.

⑥    객체 포인터로 멤버를 접근할 때에는 (  &  ) 연산자를 사용한다.

⑦    (  nullptr  )은 null pointer를 의미하는 것으로 NULL 매크로 사용시 함수 매개변수로 전달하는 경우 int타입으로 추론되는 문제점을 해결할 수 있다.

⑧    new 연산자를 사용하여 객체를 동적으로 할당할 때 (   생성자   )가 호출된다.

⑨    동적으로 할당 된 객체 소멸 시 (  소멸자  )가 호출된다.

⑩    함수 선언 시 (  const  )를 사용하면 멤버 변수의 값을 변경할 수 없다.

⑪    스마트 포인터 중 ( unique_ptr  )는 포인터를 공유할 수 없다.

⑫    스마트 포인터를 사용하려면 (  <memory>  ) 헤더 파일이 필요하다.