1번 스택 푸시

push(stack,item)//원소 집어넣기
	if(top >= n-1) then stackFull();
	top = top + 1;
	stack[top] = item;
end push()
=================================================
2번 스텍 팝

pop(stack)//원소 꺼내기
	if(top < 0) then stackEmpty()
	else{
		item = stack[top]
		top = top - 1
		return item
	}
end pop()
==============================================
3번 연결리스트 푸시

push(stack,item)//top에 item삽입
	node newNode = new node()
	newNode.data = item
	newNode.link = top
	top = newNode
end push()


==============================================
4번 연결리스트에 팝

pop()//top원소를 삭제
	if(stackTop = null) then return null
	else{
		item = stackTop.data	//item에 제거할 top원소 넣어줌
		stackTop = stackTop.link//Top을 다음 원소 주소로 바꿔줌
		return item		//제거된 원소
	}
end pop()

==============================================
5번 원형큐의 enque부분 배열 사용
//rear에서 삽입되고 front에서 제거,rear이랑 front는 -1 로 초기화
*****원형큐******
enqueue(q,item)
	rear = (rear + 1) % queueSize //rear에다가 rear+1해서 큐 크기로 나눠줌
	if(front = rear) then queueFull()//나눠준값이 front랑 같으면 큐 크기 늘려줘야함
	q[rear] = item//front랑 rear랑 같지 않다면 값을 넣어줌
end enqueue()


*****배열큐******
enqueue(q,item)
	if(count == queueSize) queueFull()
	itemArray[rear] = x
	rear = (rear + 1) % queueSize//rear를 하나 늘려서 값을 넣어줌
	count++
	
end enqueue()


==============================================
6번 dequeue

*****원형큐******
dequque()
	if(front = rear) then queueEmpty()
	else{
		front = (front+1) % queuSize()//front를 증가시켜서 제거
	return q[front]
	}
end dequeue()


*****배열큐******

dequeue(q)
	if(isEmpty(q)) return null
	item = itemArray[front]
	front = (front + 1) % queueSize
	count--
	return item
end dequeue

================================================
7번 연결리스트로 스택을 구현하는 경우의 장점을 설명하라

장점
1.연결리스트를 이용하면 스택의 크기가 정해져있지 않고 동적으로 늘어날수 있기
때문에 push와pop이 유연함
2.노드 추가에만 메모리를 할당한다.
3.top노드를 포인터 변수가 가리키고있어 포인터변수로 쉽게 접근이 가능하다.
단점
1.포인터 연산이 필요


****연결리스트로 큐를 구현하는 경우의 장점을 설명하라****
1.삽입,삭제로 인한 다른 원소들의 이동이 필요없음
2.연산이 신속하게 수행
3.여러개의 큐 운영시에도 연산이 간단

단점
1.링크 필드에 할당하는 추가적인 저장공강이 필요
********************************************************

=================================================

8번 다음식을 후위 표기식으로 변환
중위표기법 =  사용자가 사용하는 표기법
후위표기법 = 컴퓨터가 사용하는 표기법->괄호가 필요없고 우선순위가 없다.

**피연산자가 나오면 푸쉬하고 연산자 나오면 두개 팝해서 계산 후 푸쉬,괄호 연산자가 오면 무조건 괄호 닫는거 나올때까지 스택에 담기,연산자 우선순위 조심하기-> 우선순위가 top의 우선순위보다 높으면 푸시,낮으면 pop(+,-가 *,/보다 우선순위 높음. 따라서 +랑 *만나면 *가 낮기때문에 먼저 pop됨)**
스택 싸이는데 먼저 있던 연산자의 우선순위가 더 크면 푸쉬하고 낮으면 먼저잇던 연산자가 pop됨


(큰놈이 작은놈 밀어내니까 pop되는거고, 작은놈 들어올떄 큰놈이 있으면 못밀어내니까 그냥 쌓임.)

(F+A*B)/E-(A+B)*D+C 


FAB*+E/AB+D*-C+

=================================================
9번 원형큐를 사용하는 가장 큰 이유를 적어라 - > 원형큐의 front가 위치한 곳에는 항상 데이터가 들어올수 없다.

1.<배열>을 이용하면 front의 앞부분에 대해서 활용을 못하고 메모리 낭비가 된다
2.<이동 큐> 이용하면 큐 다찼을때 데이터를 앞쪽으로 다 이동시킬수 있지만 이는 비효율 적이다
3.<원형큐>이용하면 선입선출의 구조로 선형 큐의 한계점을 해결하기 위한 구조이다.이미 꺼내어 사용한 큐의 앞부분에 다시 데이터를 저장하여 재사용이 가능하기
떄문에 선형큐보다 효율적임

=================================================
10번 폴란드식 표기법이란?장점을 설명하라.

연산자를 피연산자 왼쪽에 두는 표기법으로 장점은 괄호를 필요로 하지 않고 연산자들의 우선순위가 필요없다.
