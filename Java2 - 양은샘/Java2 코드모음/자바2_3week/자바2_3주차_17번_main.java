package 자바2_3week;

//다형성의 개념을 이용
// 상위클래스와 하위 클래스에 같은 이름의 메소드가 있을경우, 
// 상위클래스의 선언, 하위클래스의 생성 
// 의 형식으로 만들어 놓으면 다형성에 의해 자동으로 하위클래스 메소드가 호출된다. 

public class 자바2_3주차_17번_main{

	public static void main(String[] args) {
		자바2_3주차_17번_Fruit [] f = new 자바2_3주차_17번_Fruit[4];//상위클래스 객체주소만 생성
		
		f[0] = new 자바2_3주차_17번_Fruit();//상위클래스 선언, 상위클래스 생성
		f[1] = new 자바2_3주차_17번_Apple();//상위클래스 선언, 하위클래스 생성
		f[2] = new 자바2_3주차_17번_Grape();
		f[3] = new 자바2_3주차_17번_Pear();
		
		for(자바2_3주차_17번_Fruit obj : f) {//밑에 for 문과 같은 풀이 
			System.out.println(obj.me());
			
		}
		
		System.out.println("-------------------------");
		
		for(int i = 0; i < f.length; i++) {
			//상위클래스형태의 f 객체안의 me 메소드를 호출하게 되면, 
			//선언은 상위로 되어서 상위의 me 메소드를 호출하는 것이지만, 
			//생성은 하위객체형으로 생성되어서 "다형성 개념" 에 의해 하위클래스의 메소드들이 자동 호출된다. 
			System.out.println(f[i].me());
		}

	}

}
